<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.6.4</version>
        <relativePath/>
    </parent>

    <groupId>com.baohulu.basic.framework</groupId>
    <artifactId>baohulu-framework</artifactId>
    <!--
        设置项目版本号。在开发过程中使用快照版本，上线稳定后使用正式版
        注意：如果版本后缀为'-SNAPSHOT'，则代表是快照版本。
    -->
    <version>1.0-SNAPSHOT</version>
    <modelVersion>4.0.0</modelVersion>
    <!--
        目前packaging标签有3种配置：pom、jar、war
            pom：在父级项目中的pom.xml文件使用的packaging配置一定为pom。父级的pom文件只作项目的子模块的整合，在maven install时不会生成jar/war压缩包。
            jar：最为常见的打包方式，当pom文件中没有设置packaging参数时，默认使用jar方式打包。意味着在maven build时会将这个项目中的所有java文件
                都进行编译形成.class文件，且按照原来的java文件层级结构放置，最终压缩为一个jar文件。
            war：与jar包非常相似，同样是编译后的.class文件按层级结构形成文件树后打包形成的压缩包。不同的是，它会将项目中依赖的所有jar包都放在WEB-INF/lib这个文件夹下。
                WEB-INF/classes文件夹仍然放置我们自己代码的编译后形成的内容。war包非常适合部署时使用，不再需要下载其他的依赖包，能够使用户拿到war包直接使用，因此它经
                常使用于微服务项目群中的入口项目的pom配置中。
     -->
    <packaging>pom</packaging>
    <name>baohulu-framework</name>
    <description>宝葫芦，自定义的脚手架。</description>

    <!--
        通过<properties>元素用户可以自定义一个或多个Maven属性，然后在POM的其他地方使用${属性名}的方式引用该属性，
        这种做法的最大意义在于消除重复和统一管理。
    -->
    <properties>
        <!-- 指定java版本 -->
        <java.version>1.8</java.version>

        <!-- 统一字符集编码。下面三个分别是：源码，输出，编译 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <maven.compiler.encoding>UTF-8</maven.compiler.encoding>

        <!-- 编译源码和打包的版本 -->
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>

        <baohulu.version>1.0-SNAPSHOT</baohulu.version>
        <junit.version>4.13.2</junit.version>
        <slf4j-log4j12.version>1.7.30</slf4j-log4j12.version>
    </properties>

    <!-- maven多个模块(modules)聚合 -->
    <modules>
        <module>baohulu-basic</module>
        <module>baohulu-common</module>
    </modules>

    <!--
        依赖引入
        dependencies：即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）
        dependencyManagement：只是声明依赖，并不实现引入，因此子项目需要显示的声明需要用的依赖。
            如果不在子项目中声明依赖，是不会从父项目中继承下来的；
            只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom;
            另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。
    -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.baohulu.basic.framework</groupId>
                <artifactId>baohulu-basic</artifactId>
                <version>${baohulu.version}</version>
            </dependency>
            <dependency>
                <groupId>com.baohulu.basic.framework</groupId>
                <artifactId>baohulu-common</artifactId>
                <version>${baohulu.version}</version>
            </dependency>

            <!-- 日志 -->
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-log4j12</artifactId>
                <version>${slf4j-log4j12.version}</version>
                <optional>true</optional>
            </dependency>

            <!-- 单元测试 -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

</project>